@page "/orderstatus/{orderId:int}"
@rendermode InteractiveServer
@using System.Net.Http.Json
@inject HttpClient Http
@inject NavigationManager Navigation

<PageTitle>Order Status</PageTitle>

<h3>Order Status</h3>

@if (isLoading)
{
    <p><em>Loading order details...</em></p>
}
else if (order == null)
{
    <div class="alert alert-warning">
        <p>Order not found.</p>
        <button class="btn btn-primary" @onclick="GoToHome">Go to Home</button>
    </div>
}
else
{
    <div class="row">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h5>Order #@order.Id</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <h6>Status</h6>
                        <div class="progress" style="height: 30px;">
                            @{
                                var progress = GetStatusProgress(order.Status);
                                var statusColor = GetStatusColor(order.Status);
                            }
                            <div class="progress-bar @statusColor" role="progressbar"
                                 style="width: @progress%;" aria-valuenow="@progress"
                                 aria-valuemin="0" aria-valuemax="100">
                                @order.Status
                            </div>
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <p><strong>Customer Name:</strong> @order.CustomerName</p>
                            <p><strong>Phone:</strong> @order.Phone</p>
                            <p><strong>Address:</strong> @order.Address</p>
                        </div>
                        <div class="col-md-6">
                            <p><strong>Restaurant ID:</strong> @order.RestaurantId</p>
                            <p><strong>Order Date:</strong> @order.OrderDate.ToString("MMM dd, yyyy HH:mm")</p>
                            <p><strong>Total Amount:</strong> $@order.TotalAmount.ToString("F2")</p>
                        </div>
                    </div>

                    <h6>Order Items</h6>
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Menu Item ID</th>
                                <th>Quantity</th>
                                <th>Price</th>
                                <th>Subtotal</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in order.Items)
                            {
                                <tr>
                                    <td>@item.MenuItemId</td>
                                    <td>@item.Quantity</td>
                                    <td>$@item.Price.ToString("F2")</td>
                                    <td>$@((item.Price * item.Quantity).ToString("F2"))</td>
                                </tr>
                            }
                        </tbody>
                    </table>

                    @if (order.Status != "Delivered" && order.Status != "Cancelled")
                    {
                        <div class="mt-4">
                            <h6>Update Order Status</h6>
                            <div class="btn-group" role="group">
                                <button class="btn btn-outline-primary" @onclick='() => UpdateStatus("Pending")'>
                                    Pending
                                </button>
                                <button class="btn btn-outline-info" @onclick='() => UpdateStatus("Preparing")'>
                                    Preparing
                                </button>
                                <button class="btn btn-outline-warning" @onclick='() => UpdateStatus("OutForDelivery")'>
                                    Out for Delivery
                                </button>
                                <button class="btn btn-outline-success" @onclick='() => UpdateStatus("Delivered")'>
                                    Delivered
                                </button>
                                <button class="btn btn-outline-danger" @onclick='() => UpdateStatus("Cancelled")'>
                                    Cancelled
                                </button>
                            </div>
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(statusMessage))
                    {
                        <div class="alert alert-info mt-3">
                            @statusMessage
                        </div>
                    }
                </div>
            </div>

            <div class="mt-3">
                <button class="btn btn-primary" @onclick="RefreshStatus">
                    Refresh Status
                </button>
                <button class="btn btn-secondary" @onclick="GoToHome">
                    Back to Home
                </button>
            </div>
        </div>

        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    <h6>Order Timeline</h6>
                </div>
                <div class="card-body">
                    <div class="timeline">
                        <div class="timeline-item @(IsStatusReached("Pending") ? "active" : "")">
                            <div class="timeline-marker"></div>
                            <div class="timeline-content">
                                <p class="mb-0"><strong>Order Placed</strong></p>
                                <small class="text-muted">Pending confirmation</small>
                            </div>
                        </div>
                        <div class="timeline-item @(IsStatusReached("Preparing") ? "active" : "")">
                            <div class="timeline-marker"></div>
                            <div class="timeline-content">
                                <p class="mb-0"><strong>Preparing</strong></p>
                                <small class="text-muted">Kitchen is preparing your order</small>
                            </div>
                        </div>
                        <div class="timeline-item @(IsStatusReached("OutForDelivery") ? "active" : "")">
                            <div class="timeline-marker"></div>
                            <div class="timeline-content">
                                <p class="mb-0"><strong>Out for Delivery</strong></p>
                                <small class="text-muted">On the way to you</small>
                            </div>
                        </div>
                        <div class="timeline-item @(IsStatusReached("Delivered") ? "active" : "")">
                            <div class="timeline-marker"></div>
                            <div class="timeline-content">
                                <p class="mb-0"><strong>Delivered</strong></p>
                                <small class="text-muted">Enjoy your meal!</small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<style>
    .timeline {
        position: relative;
        padding-left: 30px;
    }

    .timeline-item {
        position: relative;
        padding-bottom: 20px;
    }

    .timeline-item:before {
        content: '';
        position: absolute;
        left: -22px;
        top: 10px;
        width: 2px;
        height: 100%;
        background: #dee2e6;
    }

    .timeline-item:last-child:before {
        display: none;
    }

    .timeline-marker {
        position: absolute;
        left: -28px;
        top: 0;
        width: 14px;
        height: 14px;
        border-radius: 50%;
        background: #dee2e6;
        border: 2px solid #fff;
    }

    .timeline-item.active .timeline-marker {
        background: #0d6efd;
    }

    .timeline-item.active {
        color: #0d6efd;
    }
</style>

@code {
    [Parameter]
    public int OrderId { get; set; }

    private Order? order;
    private bool isLoading = true;
    private string statusMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadOrder();
    }

    private async Task LoadOrder()
    {
        try
        {
            isLoading = true;
            order = await Http.GetFromJsonAsync<Order>($"http://localhost:5132/api/Order/{OrderId}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading order: {ex.Message}");
            order = null;
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task UpdateStatus(string newStatus)
    {
        try
        {
            statusMessage = "Updating status...";
            var response = await Http.PutAsJsonAsync(
                $"http://localhost:5132/api/Order/{OrderId}/status",
                new { Status = newStatus });

            if (response.IsSuccessStatusCode)
            {
                statusMessage = $"Status updated to {newStatus}";
                await LoadOrder();
                await Task.Delay(2000);
                statusMessage = string.Empty;
            }
            else
            {
                statusMessage = "Failed to update status";
            }
        }
        catch (Exception ex)
        {
            statusMessage = $"Error: {ex.Message}";
        }
    }

    private async Task RefreshStatus()
    {
        statusMessage = "Refreshing...";
        await LoadOrder();
        statusMessage = "Order refreshed";
        await Task.Delay(1500);
        statusMessage = string.Empty;
    }

    private void GoToHome()
    {
        Navigation.NavigateTo("/");
    }

    private int GetStatusProgress(string status) => status switch
    {
        "Pending" => 25,
        "Preparing" => 50,
        "OutForDelivery" => 75,
        "Delivered" => 100,
        "Cancelled" => 100,
        _ => 0
    };

    private string GetStatusColor(string status) => status switch
    {
        "Pending" => "bg-secondary",
        "Preparing" => "bg-info",
        "OutForDelivery" => "bg-warning",
        "Delivered" => "bg-success",
        "Cancelled" => "bg-danger",
        _ => "bg-secondary"
    };

    private bool IsStatusReached(string status)
    {
        if (order == null) return false;

        var statuses = new[] { "Pending", "Preparing", "OutForDelivery", "Delivered" };
        var currentIndex = Array.IndexOf(statuses, order.Status);
        var checkIndex = Array.IndexOf(statuses, status);

        return currentIndex >= checkIndex;
    }

    public class Order
    {
        public int Id { get; set; }
        public int UserId { get; set; }
        public int RestaurantId { get; set; }
        public string CustomerName { get; set; } = string.Empty;
        public string Phone { get; set; } = string.Empty;
        public string Address { get; set; } = string.Empty;
        public decimal TotalAmount { get; set; }
        public string Status { get; set; } = "Pending";
        public DateTime OrderDate { get; set; }
        public List<OrderItem> Items { get; set; } = new();
    }

    public class OrderItem
    {
        public int Id { get; set; }
        public int MenuItemId { get; set; }
        public int Quantity { get; set; }
        public decimal Price { get; set; }
    }
}